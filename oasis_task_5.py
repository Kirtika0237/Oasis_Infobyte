# -*- coding: utf-8 -*-
"""Oasis_task_5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k8yfe5mMTn8DGGMBqXKflF-NG3rM5VqU

TASK 5: SALES PREDICTION USING PYTHON

Sales prediction means predicting how much of a product people will buy based on factors
such as the amount you spend to advertise your product, the segment of people you
advertise for, or the platform you are advertising on about your product.
Typically, a product and service-based business always need their Data Scientist to predict
their future sales with every step they take to manipulate the cost of advertising their
product. So letâ€™s start the task of sales prediction with machine learning using Python.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('/content/Advertising.csv')
data

data.head(5)

data.info()

data.describe()

data.shape

data.isnull().sum()

data.columns

data=data.drop(columns=['Unnamed: 0'])
data

data.columns

x = data.iloc[:, [0, 1, 2]]
x

y=data.iloc[:,-1]
y

x.iloc[:,0]

data.corr()

sns.pairplot(data=data)
plt.show()

corr_matrix = data.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='twilightm', center=0)
plt.show()

plt.figure(figsize=(10,5))
sns.scatterplot(x='TV',y='Sales',data=data)
plt.title('TV vs sales')
plt.show()

plt.figure(figsize=(10,5))
sns.histplot(data['Sales'],kde=True,bins=10)
plt.title('Distribution of Sales')
plt.xlabel('Sales')
plt.ylabel('Frequncy')
plt.show()

# Binning the data into categories
data['TV_bins'] = pd.cut(data['TV'], bins=3, labels=['Low', 'Medium', 'High'])
data['Radio_bins'] = pd.cut(data['Radio'], bins=3, labels=['Low', 'Medium', 'High'])
data['Newspaper_bins'] = pd.cut(data['Newspaper'], bins=3, labels=['Low', 'Medium', 'High'])

plt.figure(figsize=(15, 5))

# Bar plot for TV
plt.subplot(1, 3, 1)
sns.barplot(x='TV_bins', y='Sales', data=data, palette='viridis')
plt.title('Mean Sales by TV Spend')

# Bar plot for Radio
plt.subplot(1, 3, 2)
sns.barplot(x='Radio_bins', y='Sales', data=data, palette='viridis')
plt.title('Mean Sales by Radio Spend')

# Bar plot for Newspaper
plt.subplot(1, 3, 3)
sns.barplot(x='Newspaper_bins', y='Sales', data=data, palette='viridis')
plt.title('Mean Sales by Newspaper Spend')

plt.tight_layout()
plt.show()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression
reg=LinearRegression()
reg.fit(x_train,y_train)

tr_acc=reg.score(x_train, y_train)
ts_acc=reg.score(x_test,y_test)
tr_acc,ts_acc

x_column = 'TV'
y_column = 'Sales'
plt.scatter(x, y)
plt.plot(x, reg.predict(x), color='red')
plt.xlabel(x_column)
plt.ylabel(y_column)
plt.title('Linear Regression')
plt.show()

from sklearn.metrics import mean_squared_error, r2_score
x_column = 'TV'
y_column = 'Sales'
mse = mean_squared_error(y, y_pred)
print("Mean Squared Error (MSE):", mse)

# Calculate R-squared (R2) score
r2 = r2_score(y, y_pred)
print("R-squared (R2) score:", r2)